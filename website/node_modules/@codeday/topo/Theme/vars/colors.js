"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _theme = _interopRequireDefault(require("@chakra-ui/core/dist/theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var linearGrad = function linearGrad(from, to, deg) {
  return "linear-gradient(".concat(deg, "deg, ").concat(from, " 0%, ").concat(to, " 100%)");
};

var linearGrads = function linearGrads(from, to) {
  return [0, 30, 45, 60, 90, 120, 135, 150, 180, 210, 240, 270, 300, 330].map(function (deg) {
    return _defineProperty({}, deg, linearGrad(from, to, deg));
  }).reduce(function (accum, obj) {
    return _objectSpread({}, accum, {}, obj);
  }, {});
};

var colors = _objectSpread({}, _theme["default"].colors, {
  black: '#252222',
  white: '#ffffff',
  gray: {
    50: '#faf9f9',
    100: '#f1ecec',
    200: '#e6dfdf',
    300: '#dbd1d1',
    400: '#cfc1c1',
    500: '#c1afaf',
    600: '#ad9c9c',
    700: '#958686',
    800: '#756969',
    900: '#453e3e'
  },
  red: {
    50: '#fff8f8',
    100: '#ffe8e9',
    200: '#ffd7d9',
    300: '#ffc4c6',
    400: '#ffafb1',
    500: '#ff9598',
    600: '#ff686b',
    700: '#e35d61',
    800: '#b4494d',
    900: '#6a2b2d'
  },
  orange: {
    50: '#fff8f2',
    100: '#ffead8',
    200: '#ffdaba',
    300: '#ffc899',
    400: '#ffb473',
    500: '#eea261',
    600: '#d49157',
    700: '#b67c4a',
    800: '#90623b',
    900: '#543a22'
  },
  yellow: {
    50: '#fffdbc',
    100: '#f8f365',
    200: '#ebe660',
    300: '#dcd85a',
    400: '#ccc853',
    500: '#bbb74c',
    600: '#a7a444',
    700: '#8f8c3a',
    800: '#716f2e',
    900: '#42411b'
  },
  green: {
    50: '#eaffea',
    100: '#b8ffb5',
    200: '#6dfe68',
    300: '#66ee61',
    400: '#5fdd5a',
    500: '#56ca53',
    600: '#4db54a',
    700: '#429b3f',
    800: '#347a32',
    900: '#1f481d'
  },
  teal: {
    50: '#e7fff2',
    100: '#acffd3',
    200: '#66fbab',
    300: '#60eca1',
    400: '#59db95',
    500: '#52c889',
    600: '#49b37a',
    700: '#3f9969',
    800: '#317953',
    900: '#1d4731'
  },
  cyan: {
    50: '#e3fffe',
    100: '#96fffc',
    200: '#64f6f1',
    300: '#5ee7e2',
    400: '#57d6d2',
    500: '#50c4c0',
    600: '#47afac',
    700: '#3d9693',
    800: '#307774',
    900: '#1c4644'
  },
  blue: {
    50: '#f5faff',
    100: '#def0ff',
    200: '#c6e5ff',
    300: '#abd8ff',
    400: '#8ccaff',
    500: '#69b9ff',
    600: '#5da5e4',
    700: '#508ec4',
    800: '#3f709a',
    900: '#25425b'
  },
  indigo: {
    50: '#f9f9ff',
    100: '#ebecff',
    200: '#dddeff',
    300: '#cecfff',
    400: '#bcbfff',
    500: '#a9acff',
    600: '#9296ff',
    700: '#767aff',
    800: '#595dda',
    900: '#343780'
  },
  purple: {
    50: '#fbf8ff',
    100: '#f4eaff',
    200: '#ebdaff',
    300: '#e2c9ff',
    400: '#d8b5ff',
    500: '#cca0ff',
    600: '#be85ff',
    700: '#ab66fa',
    800: '#8751c5',
    900: '#4f2f74'
  },
  pink: {
    50: '#fff7fb',
    100: '#ffe7f4',
    200: '#ffd5ec',
    300: '#ffc1e2',
    400: '#ffaad8',
    500: '#ff8ecb',
    600: '#ff6aba',
    700: '#dc5aa0',
    800: '#ae477e',
    900: '#672a4a'
  }
}); // eslint-disable-next-line prefer-destructuring


colors.brand = colors.red[600];
colors.success = {
  border: colors.green[100],
  bg: colors.green[500],
  text: colors.green[900]
};
colors.failure = {
  border: colors.red[100],
  bg: colors.red[500],
  text: colors.red[900]
};
colors.grad = {
  twilight: linearGrads(colors.red[500], colors.indigo[500]),
  lemonlime: linearGrads(colors.cyan[500], colors.green[500]),
  peachy: linearGrads(colors.red[500], colors.orange[500]),
  taffy: linearGrads(colors.yellow[500], colors.pink[500]),
  darken: {
    sm: linearGrads(colors.blackAlpha[300], 'rgba(0,0,0,0)'),
    lg: linearGrads(colors.blackAlpha[700], 'rgba(0,0,0,0)')
  },
  lighten: {
    sm: linearGrads(colors.whiteAlpha[300], 'rgba(255, 255, 255 ,0)'),
    lg: linearGrads(colors.whiteAlpha[700], 'rgba(255, 255, 255 ,0)')
  },
  skelly: "linear-gradient(270deg, ".concat(colors.gray[300], " 0, ").concat(colors.gray[100], " 50%, ").concat(colors.gray[300], " 100%)")
};
colors.modes = {
  light: {
    color: colors.black,
    text: colors.black,
    textLight: colors.gray[700],
    bg: colors.white,
    background: colors.white,
    primary: colors.brand,
    borderColor: colors.gray[200],
    border: colors.gray[200],
    placeholderColor: colors.gray[600],
    placeholder: colors.gray[600]
  },
  dark: {
    color: colors.whiteAlpha[900],
    text: colors.whiteAlpha[900],
    textLight: colors.whiteAlpha[500],
    bg: colors.gray[800],
    primary: colors.whiteAlpha[900],
    background: colors.gray[800],
    border: colors.whiteAlpha[300],
    borderColor: colors.whiteAlpha[300],
    placeholderColor: colors.whiteAlpha[400],
    placeholder: colors.whiteAlpha[400]
  }
};
colors.current = colors.modes.light; // Todo: change this later

var _default = colors;
exports["default"] = _default;